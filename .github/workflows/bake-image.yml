---
name: Bake Container Image
'on':
  push:
    branches: [main]
  workflow_dispatch:
env:
  REGISTRY: ghcr.io
  IMAGE_TITLE: "${{ github.repository }}"
  IMAGE_METADATA: |
    org.opencontainers.image.authors=${{ github.repository_owner }}
    org.opencontainers.image.description=${{ github.event.repository.description }}
    org.opencontainers.image.documentation=${{ github.server_url }}/${{ github.repository }}/blob/${{ github.ref_name }}/README.md
    org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
    org.opencontainers.image.ref.name=${{ github.ref_name }}
    org.opencontainers.image.revision=${{ github.sha }}
    org.opencontainers.image.source=${{ github.event.repository.clone_url }}
    org.opencontainers.image.version=${{ github.ref_name }}
    org.opencontainers.image.vendor=${{ github.repository_owner }}
permissions:
  contents: read # checkout
  packages: write # push to ghcr.io
  id-token: write # OIDC & cosign
jobs:
  build-and-sign:
    runs-on: ubuntu-latest
    steps:
      # 0) Checkout repo for local build context
      - uses: actions/checkout@v4
      # 1) Generate tags, labels and annotations
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_TITLE }}
          # Tag strategy
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
          # Labels and Annotations;
          # Labels and annotations that are already in the bake file take precedence over the ones defined here.
          labels: |
            ${{ env.IMAGE_METADATA }}
            org.opencontainers.image.title=${{ env.IMAGE_TITLE }}
            org.opencontainers.image.url=https://${{ env.REGISTRY }}/${{ env.IMAGE_TITLE }}
          annotations: |
            ${{ env.IMAGE_METADATA }}
            org.opencontainers.image.title=${{ env.IMAGE_TITLE }}
            org.opencontainers.image.url=https://${{ env.REGISTRY }}/${{ env.IMAGE_TITLE }}
      # 2) Docker Buildx prerequisites
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # 3) Log in to registry
      - name: "Login to OCI registry: ${{ env.REGISTRY }}"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # 4) Build & push with **one** injection of tags+labels+annotations
      - name: Build & push images with Bake
        id: bake
        uses: docker/bake-action@v6
        with:
          files: |
            docker-bake.hcl
            docker-bake.override.hcl
            cwd://${{ steps.meta.outputs.bake-file-labels }}
            cwd://${{ steps.meta.outputs.bake-file-annotations }}
          targets: multiarch-push
          # Enable caching and set tags.
          # Since tags are "set", these tags take precdence over any tags defined in the bake file.
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
            *.tags=${{ steps.meta.outputs.tags }}
      # 5) Install cosign for keyless signing
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
      # 6) Sign every pushed digest returned by Bake metadata
      - name: Sign pushed images
        shell: sh
        env:
          META_JSON: ${{ steps.bake.outputs.metadata }}
        run: |
          echo "$META_JSON" | jq -r '
            ..|objects|select(has("name") and has("digest")) |
            "\(.name)@\(.digest)"
          ' | sort -u | while read -r ref; do
            cosign sign --yes "$ref"
          done
      # 7) Post-build clean up
      - name: Delete all containers from repository without tags
        uses: Chizkiyahu/delete-untagged-ghcr-action@v6
        with:
          token: ${{ secrets.DELETE_PACKAGES }}
          repository_owner: ${{ github.repository_owner }}
          repository: ${{ github.repository }}
          package_name: ''
          untagged_only: true
          owner_type: org
